package others_pack;
import java.util.*;


class Point{
	int x,y, day; 
	
	public Point(int x, int y, int day){
		this.x = x;
		this.y= y;
		this.day = day;
	}
	
}

public class test {

	static int map_row, map_col;
	static int result = 0;
	static int dist = 0;
	
	static int empty = 0;
	static Queue<Point> queue; 
	static int[][] map = new int[1001][1001];
	static int[][] visited = new int[1001][1001];
	

	static int[] r_dir = { 1, -1, 0, 0 };
	static int[] c_dir = { 0, 0, 1, -1 };

	public static void main(String[] args) {

		Scanner scan = new Scanner(System.in);
		queue = new LinkedList<Point>();
		map_row = scan.nextInt();
		map_col = scan.nextInt();
		scan.nextLine();

		for (int i = 0; i < map_col; i++) {
			for (int j = 0; j < map_row; j++) {
				map[i][j] = scan.nextInt();
				result +=map[i][j];
				if(map[i][j] == 1){
					queue.offer(new Point(i, j , 0));
					visited[i][j] = 1; 
				}else if(map[i][j] == -1){
					empty++; 
					result +=1; 
					visited[i][j] = -1; 
				}
			}
		}
		
		if(result == (map_row * map_col) - empty  || result == -(map_row * map_col)){ // 처음부터 모두 익어있던 상태 
			System.out.println("0");
			return ; 
		}else if(result == 0 ){
			System.out.println("-1");
			return ; 
		}
		
		result = 0; 
		solve_7576();

		for (int i = 0; i < map_col; i++) {
			for (int j = 0; j < map_row; j++) {
				if(visited[i][j] == 0){		
					System.out.println("-1");
					return ; 
					
				}
			}
		}
		System.out.println(result);
	}
	
	public static void solve_7576(){
		 
		while(!queue.isEmpty()){
			Point p = queue.poll();
			int x = p.x;
			int y = p.y;
			int day = p.day;
			
			for(int i=0; i<4; i++){
				int new_x = x + r_dir[i];
				int new_y = y + c_dir[i];
				if( new_x < map_col && new_x >=0 && new_y < map_row && new_y >=0 && map[new_x][new_y] != -1 && visited[new_x][new_y] == 0){
					visited[new_x][new_y] = day+1;
					queue.offer(new Point(new_x, new_y, day+1));
					
				}
			}
			
			result= visited[x][y];
		}
	}
}
